{"ast":null,"code":"import appConfig from '../config';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds\n  };\n}\n\nexport function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.id_token\n  };\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message\n  };\n}\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true\n  };\n}\n\nexport function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false\n  };\n} // Logs the user out\n\nexport function logoutUser() {\n  return dispatch => {\n    dispatch(requestLogout());\n    localStorage.removeItem('id_token');\n    document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    dispatch(receiveLogout());\n  };\n}\nexport function loginUser(creds) {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    credentials: 'include',\n    body: `login=${creds.login}&password=${creds.password}`\n  };\n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n\n    if (process.env.NODE_ENV === \"development\") {\n      return fetch('/login', config).then(response => response.json().then(user => ({\n        user,\n        response\n      }))).then(({\n        user,\n        response\n      }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(loginError(user.message));\n          return Promise.reject(user);\n        } // in posts create new action and check http status, if malign logout\n        // If login was successful, set the token in local storage\n\n\n        localStorage.setItem('id_token', user.id_token); // Dispatch the success action\n\n        dispatch(receiveLogin(user));\n        return Promise.resolve(user);\n      }).catch(err => console.error('Error: ', err));\n    } else {\n      localStorage.setItem('id_token', appConfig.id_token);\n      dispatch(receiveLogin({\n        id_token: appConfig.id_token\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Kyle/Desktop/Dev/MyApp/src/actions/user.js"],"names":["appConfig","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","requestLogin","creds","type","isFetching","isAuthenticated","receiveLogin","user","id_token","loginError","message","requestLogout","receiveLogout","logoutUser","dispatch","localStorage","removeItem","document","cookie","loginUser","config","method","headers","credentials","body","login","password","process","env","NODE_ENV","fetch","then","response","json","ok","Promise","reject","setItem","resolve","catch","err","console","error"],"mappings":"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","sourcesContent":["import appConfig from '../config';\r\n\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\r\n\r\nfunction requestLogin(creds) {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    isFetching: true,\r\n    isAuthenticated: false,\r\n    creds,\r\n  };\r\n}\r\n\r\nexport function receiveLogin(user) {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    isFetching: false,\r\n    isAuthenticated: true,\r\n    id_token: user.id_token,\r\n  };\r\n}\r\n\r\nfunction loginError(message) {\r\n  return {\r\n    type: LOGIN_FAILURE,\r\n    isFetching: false,\r\n    isAuthenticated: false,\r\n    message,\r\n  };\r\n}\r\n\r\nfunction requestLogout() {\r\n  return {\r\n    type: LOGOUT_REQUEST,\r\n    isFetching: true,\r\n    isAuthenticated: true,\r\n  };\r\n}\r\n\r\nexport function receiveLogout() {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n    isFetching: false,\r\n    isAuthenticated: false,\r\n  };\r\n}\r\n\r\n// Logs the user out\r\nexport function logoutUser() {\r\n  return dispatch => {\r\n    dispatch(requestLogout());\r\n    localStorage.removeItem('id_token');\r\n    document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n    dispatch(receiveLogout());\r\n  };\r\n}\r\n\r\nexport function loginUser(creds) {\r\n  const config = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n    credentials: 'include',\r\n    body: `login=${creds.login}&password=${creds.password}`,\r\n  };\r\n  \r\n  return dispatch => {\r\n    // We dispatch requestLogin to kickoff the call to the API\r\n    dispatch(requestLogin(creds));\r\n    if(process.env.NODE_ENV === \"development\") {\r\n    return fetch('/login', config)\r\n      .then(response => response.json().then(user => ({ user, response })))\r\n      .then(({ user, response }) => {\r\n        if (!response.ok) {\r\n          // If there was a problem, we want to\r\n          // dispatch the error condition\r\n          dispatch(loginError(user.message));\r\n          return Promise.reject(user);\r\n        }\r\n        // in posts create new action and check http status, if malign logout\r\n        // If login was successful, set the token in local storage\r\n        localStorage.setItem('id_token', user.id_token);\r\n        // Dispatch the success action\r\n        dispatch(receiveLogin(user));\r\n        return Promise.resolve(user);\r\n      })\r\n      .catch(err => console.error('Error: ', err));\r\n    } else {\r\n      localStorage.setItem('id_token', appConfig.id_token);\r\n      dispatch(receiveLogin({id_token: appConfig.id_token}))\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}